import { AiFillHome } from 'react-icons/ai';
import { useEffect, useState } from 'react';
import { useNavigate } from 'react-router-dom';
import { useForm, type SubmitHandler } from "react-hook-form"


interface LoginFormProps {
    mode: 'login' | 'signup';
}
type AccountForm = {
    email: string;
    password: string;
}
export default function LoginForm({ mode }: LoginFormProps) {
    const isLoginModeInitial = mode === 'login';
    const [isLoginMode, setIsLoginMode] = useState(isLoginModeInitial);
    const { handleSubmit, register, formState: { errors } } = useForm<AccountForm>()
    const navigate = useNavigate();
    // const { login } = useAuth()

    useEffect(() => {
        setIsLoginMode(mode === 'login');
    }, [mode]);

    const toggleMode = (newMode: boolean) => {
        if (newMode) navigate('/login');
        else navigate('/signup');
    };

    const onSubmit: SubmitHandler<AccountForm> = (data) => { console.log(data) }


    return (
        <div className="relative flex w-full min-h-screen items-center justify-center bg-gradient-to-b from-green-300 to-green-200 px-4">
            <a href="/" className='absolute p-2 rounded-full top-4 left-4'>
                <AiFillHome className="h-7 w-7 text-white" />
            </a>

            <div className="w-[430px] bg-white p-8 rounded-2xl shadow-lg">
                <div className="flex justify-center mb-4">
                    <h2 className="text-3xl font-semibold text-center text-[#008080]">
                        {isLoginMode ? 'Login' : 'Sign up'}
                    </h2>
                </div>

                <div className="relative flex h-12 mb-6 border border-gray-300 rounded-full overflow-hidden">
                    <button
                        onClick={() => toggleMode(true)}
                        className={`w-1/2 text-lg font-medium transition-all z-10 ${isLoginMode ? 'text-white' : 'text-[#10B981] cursor-pointer'
                            }`}
                    >
                        Log in
                    </button>
                    <button
                        onClick={() => toggleMode(false)}
                        className={`w-1/2 text-lg font-medium transition-all z-10 ${!isLoginMode ? 'text-white ' : 'text-[#10B981] cursor-pointer'
                            }`}
                    >
                        Sign up
                    </button>
                    <div
                        className={`absolute top-0 h-full w-1/2 rounded-full cursor-pointer bg-gradient-to-r from-[#008080] via-[#10B981] to-[#008080] transition-all duration-500 ease-in-out ${isLoginMode ? 'left-0' : 'left-1/2'
                            }`}
                    />
                </div>

                <form onSubmit={handleSubmit(onSubmit)} className="space-y-4 flex flex-col justify-between">
                    <input
                        {...register("email", { required: true, minLength: 8 })}
                        type="email"
                        name="email"
                        placeholder="Email Address"
                        required
                        className="w-full p-3 border-b-2 border-gray-300 outline-none focus:border-cyan-500 placeholder-gray-400"

                    />

                    {errors.email && <p className='text-red-500 font-semibold text-md'>{errors.password.message}</p>}
                    <input
                        type="password"
                        {...register("password", { required: true, minLength: 6, pattern: { value: /^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[@$!%*?&])[A-Za-z\d@$!%*?&]{8,}$/, message: "mot de passe trop faible" } })}
                        name="password"
                        placeholder="Password"
                        required
                        className="w-full p-3 border-b-2 border-gray-300 outline-none focus:border-cyan-500 placeholder-gray-400 transition-all"
                    />
                    {errors.password && <p className='text-red-500 font-semibold text-md'>{errors.password.message}</p>}
                    {!isLoginMode && (
                        <input
                            type="password"
                            name="password2"
                            placeholder="Confirm Password"
                            required
                            className="w-full p-3 border-b-2 border-gray-300 outline-none focus:border-cyan-500 placeholder-gray-400"
                        />
                    )}
                    <button
                        className="w-full p-3 bg-gradient-to-r from-[#008080] via-[#10B981] to-[#008080] text-white rounded-full text-lg font-medium hover:opacity-90 transition-all cursor-pointer"
                    >
                        {isLoginMode ? 'Login' : 'Sign up'}
                    </button>
                </form>
            </div>
        </div>
    );
}
